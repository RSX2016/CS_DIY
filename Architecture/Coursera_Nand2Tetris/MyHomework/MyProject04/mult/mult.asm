// by Rsx


// Multiplies R0 and R1 and stores the result in R2.
// (R0, R1, R2 refer to RAM[0], RAM[1], and RAM[2], respectively.)

// 等价C代码
// tmp = 0;
// i = 0;
// if (i != R0) {
//      tmp = tmp + R1;
//      i++;
// }
// R2 = tmp;

// 所做内容:: R2 = R0 * R1


@tmp    // [0|0000_0000]                        //0000_0000_0001_0000 装载内存地址 0x0010 内存中存放变量符号的启始位置
M=0     // [1|0000_0001]    // tmp = 0          //1110_1010_1000_1000 [0_1010_10] [001] [000] [Set 0] [M] [NoJump]
@i      // [2|0000_0010]                        //0000_0000_0001_0001 装载内存地址 0x0011 内存中存放变量符号的启始位置 + 1 
M=0     // [3|0000_0011]    // i = 0            //1110_1010_1000_1000 [0_1010_10] [001] [000] [Set 0] [M] [NoJump]

(LOOP)
@i      // [4|0000_0100]                        //
D=M     // [5|0000_0101]    // D = M[i]         // 1111_1100_0001_0000 [1_1100_00] [010] [000] [Set M] [D] [NoJump]
@R0     // [6|0000_0110]                        // 0000_0000_0000_0000  装载内存地址 0x0000
D=D-M   // [7|0000_0111]    // D = i - M[R0]    // 1111_0100_1101_0000 [1_0100_11] [010] [000] [Set D-M] [D] [NoJump]
@MOVE   // [8|0000_1000]                        // 0000_0000_0001_0010
D;JEQ   // [9|0000_1001]    // IF (i == R0) 跳转 // 1110_0011_0000_0010 [0_0011_00] [000] [010] [Set D] [NULL] [JEQ]
@R1     // [10|0000_1010]
D=M     // [11|0000_1011]    // D = M[R1]
@tmp    // [12|0000_1100]
M=M+D   // [13|0000_1101]    // tmp = tmp + R1
@i      // [14|0000_1110]
M=M+1   // [15|0000_1111]    // i++
@LOOP   // [16|0001_0000]                        // 0000_0000_0000_0100
0;JMP   // [17|0001_0001]    // 回LOOP


(MOVE)
@tmp    // [18|0001_0010]
D=M     // [19|0001_0011]    // D = tmp
@R2     // [20|0001_0100]
M=D     // [21|0001_0101]    // R2 = tmp

(END)
@END    // [22|0001_0110]
0;JMP   // [23|0000_0111]